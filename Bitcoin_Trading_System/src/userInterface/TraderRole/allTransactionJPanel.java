/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.TraderRole;

import Blockchain.Block;
import Blockchain.BlockChain;
import Blockchain.Transaction;
import Blockchain.searchNewestBlockAPI;
import Blockchain.showAllTransactionsAPI;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author qyao7
 */
public class allTransactionJPanel extends javax.swing.JPanel implements showAllTransactionsAPI {

    /**
     * Creates new form allTransactionJPanel
     */
    private JPanel processPanel;
    private EcoSystem business;
    private Enterprise e;

    public allTransactionJPanel(JPanel processPanel, EcoSystem business, Enterprise e) {
        initComponents();
        this.processPanel = processPanel;
        this.business = business;
        this.e = e;
        showAllTransactionsAPI.showAllTransaction(TblAllTransaction, business);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BtnBack2 = new javax.swing.JButton();
        BtnMyTransaction = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TblAllTransaction = new javax.swing.JTable();

        BtnBack2.setText("Back");
        BtnBack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBack2ActionPerformed(evt);
            }
        });

        BtnMyTransaction.setText("Only show my transactions");
        BtnMyTransaction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnMyTransactionActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setText("Block Chain Transaction History");

        TblAllTransaction.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "From", "To", "Amount", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TblAllTransaction);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(52, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BtnBack2)
                                .addGap(208, 208, 208)
                                .addComponent(BtnMyTransaction)))
                        .addGap(258, 258, 258))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(79, 79, 79)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(214, 214, 214)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnBack2)
                    .addComponent(BtnMyTransaction))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void BtnBack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBack2ActionPerformed
        // TODO add your handling code here:
        processPanel.remove(this);
        Component[] componentArray = processPanel.getComponents();
        Component component = componentArray[componentArray.length - 1];
        TraderWorkAreaJPanel traderArea = (TraderWorkAreaJPanel) component;
        CardLayout layout = (CardLayout) processPanel.getLayout();
        layout.previous(processPanel);
    }//GEN-LAST:event_BtnBack2ActionPerformed

    private void BtnMyTransactionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnMyTransactionActionPerformed
        // TODO add your handling code here:

        TblAllTransaction.setVisible(true);
        int rowCount = TblAllTransaction.getRowCount();
        DefaultTableModel model = (DefaultTableModel) TblAllTransaction.getModel();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        for (Network n : business.getNetworkList()) {
            BlockChain bc = searchNewestBlockAPI.searchNewestBlock(business);
            for (Block b : bc.getHm().values()) {
                for (Transaction trans : b.getBody().getTransactions()) {
                    if (trans.getFrom() == e.getenterpriseId() || trans.getTo() == e.getenterpriseId()) {
                        Object row[] = new Object[4];
                        row[0] = trans.getFrom();
                        row[1] = trans.getTo();
                        row[2] = trans.getBtcAmount();
                        row[3] = trans.getTransactionDate();
                        model.addRow(row);
                    }

                }
            }
        }
    }//GEN-LAST:event_BtnMyTransactionActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnBack2;
    private javax.swing.JButton BtnMyTransaction;
    private javax.swing.JTable TblAllTransaction;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
