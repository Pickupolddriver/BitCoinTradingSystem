/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.TraderRole;

import Blockchain.Transaction;
import Business.EcoSystem;
import Business.Enterprise.BrokerEnterprise;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Wallet.Wallet;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.Date;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Administrator
 */
public class CashTransactionJPanel extends javax.swing.JPanel {

    /**
     * Creates new form TaskJPanel
     */
    private JPanel processPanel;
    private EcoSystem business;
    private Enterprise enterprise;

    public CashTransactionJPanel(JPanel processPanel, EcoSystem business, Enterprise e) {
        initComponents();
        this.processPanel = processPanel;
        this.business = business;
        this.enterprise = e; 
        populateOrder();
    }

    public void populateOrder() {
        txtCash.setText("Your balance:"+enterprise.getBalance());
        txtBitcoin.setText("Your coin:"+enterprise.getWallet().refreshCount());
        DefaultTableModel dtm = (DefaultTableModel) TblCashier.getModel();
        dtm.setRowCount(0);
        for (Network n : business.getNetworkList()) {
            for (int i = 0; i < n.getEnterpriseDirectory().getEnterpriseList().size(); i++) {
               Enterprise e = n.getEnterpriseDirectory().getEnterpriseList().get(i);
               if((e.getWallet().getBuyPrice()>0)||(e.getWallet().getSellPrice()>0)){
               
               Object row[] = new Object[3];
                    row[0] = e;
                    row[1] = "N/A";
                    row[2] = "N/A";
                    if ((e.getWallet().getBuyPrice() > 0)) {
                        row[1] = e.getWallet().getBuyPrice();
                    }
                    if (e.getWallet().getSellPrice() > 0) {
                        row[2] = e.getWallet().getSellPrice();
                    }
                    dtm.addRow(row);}
                
//               
//                        }
//            }
////            if(o.getStatus().equals("P2P Confirm Neede")){
////            Object row[] = new Object[7];
////            row[0] = o;
////            row[1] = o.getT().getAmount();//          
////            row[2] = o.getStatus();
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TblCashier = new javax.swing.JTable();
        btnBuy = new javax.swing.JButton();
        btnSell = new javax.swing.JButton();
        BtnBack = new javax.swing.JButton();
        txtTotal = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtBitcoin = new javax.swing.JTextField();
        txtCash = new javax.swing.JTextField();

        TblCashier.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Cashier", "Buy", "Sell"
            }
        ));
        jScrollPane1.setViewportView(TblCashier);

        btnBuy.setText("Buy");
        btnBuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuyActionPerformed(evt);
            }
        });

        btnSell.setText("Sell");
        btnSell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSellActionPerformed(evt);
            }
        });

        BtnBack.setText("Back");
        BtnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBackActionPerformed(evt);
            }
        });

        txtTotal.setText("Please fill the blank");
        txtTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setText("Cash Transaction");

        txtBitcoin.setText("Your coin:");
        txtBitcoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBitcoinActionPerformed(evt);
            }
        });

        txtCash.setText("Your Cash:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(BtnBack)
                                .addGap(18, 18, 18)
                                .addComponent(txtBitcoin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtCash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(103, 103, 103)
                                .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(btnBuy)
                            .addGap(18, 18, 18)
                            .addComponent(btnSell)))
                    .addComponent(jLabel2))
                .addContainerGap(430, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnBack)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBitcoin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuy)
                    .addComponent(btnSell))
                .addContainerGap(142, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalActionPerformed

    private void BtnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBackActionPerformed
        // TODO add your handling code here:
        processPanel.remove(this);
        Component[] componentArray = processPanel.getComponents();
        Component component = componentArray[componentArray.length - 1];
        TraderWorkAreaJPanel traderArea = (TraderWorkAreaJPanel) component;
        CardLayout layout = (CardLayout) processPanel.getLayout();
        layout.previous(processPanel);
      
    }//GEN-LAST:event_BtnBackActionPerformed

    private void btnBuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuyActionPerformed
        int index = TblCashier.getSelectedRow();
        if (index >= 0) {
            Pattern intPattern = Pattern.compile("^\\d+$");
            if(intPattern.matcher(txtTotal.getText()).matches()){
            Enterprise e = (Enterprise) TblCashier.getValueAt(index, 0);
            Wallet w = e.getWallet();
            if (w.getSellPrice() > 0) {
                
                int num = Integer.parseInt(txtTotal.getText());
                WorkRequest wr = new WorkRequest();
                wr.setCashTotal(w.getSellPrice() * num);
                Transaction t = new Transaction();
                t.setBtcAmount(num);
                t.setFrom(e.getenterpriseId());
                t.setTo(enterprise.getenterpriseId());
                t.setTransactionDate(new Date());
                wr.setT(t);
                if(enterprise.getBalance() - wr.getCashTotal()>=0){
                wr.setStatus("Cash Transaction started");
                business.getWorkQueue().getWorkRequestList().add(wr);
                enterprise.setBalance(enterprise.getBalance() - wr.getCashTotal());
                e.setBalance(e.getBalance() + wr.getCashTotal());
                JOptionPane.showMessageDialog(null, "You have successfully made the request!");
                }else{
                JOptionPane.showMessageDialog(null, "You don't have enough money"); 
                 wr.setStatus("gg");
                }
            } else {
                JOptionPane.showMessageDialog(null, "They are not going to sell anything!");
            }
            populateOrder();
        }else{
             JOptionPane.showMessageDialog(null, "Plase fill a correct number");
            }
        } else {
            JOptionPane.showMessageDialog(null, "You need to select an Offer!");
        }                        // TODO add your handling code here:
    }//GEN-LAST:event_btnBuyActionPerformed

    private void btnSellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSellActionPerformed
        int index = TblCashier.getSelectedRow();
        if (index >= 0) {
             Pattern intPattern = Pattern.compile("^\\d+$");
            if(intPattern.matcher(txtTotal.getText()).matches()){
            Enterprise e = (Enterprise) TblCashier.getValueAt(index, 0);
            Wallet a = e.getWallet();
            if (a.getBuyPrice() > 0) {
                int num = Integer.parseInt(txtTotal.getText());
                WorkRequest ww = new WorkRequest();
                ww.setCashTotal(a.getBuyPrice() * num);
                Transaction t = new Transaction();
                t.setBtcAmount(num);
                t.setFrom(enterprise.getenterpriseId());
                t.setTo(e.getenterpriseId());
                t.setTransactionDate(new Date());
                ww.setT(t);
                ww.setStatus("Withdraw Confirm needed");
                business.getWorkQueue().getWorkRequestList().add(ww);
//                 business.getWorkQueue().getWorkRequestList().add(ww);
//                 enterprise.setBalance(enterprise.getBalance()-ww.getCashTotal());
//                e.setBalance(e.getBalance() - ww.getCashTotal());
                
                JOptionPane.showMessageDialog(null, "You have successfully made the request!");
            } 
            else {
                JOptionPane.showMessageDialog(null, "They are not going to sell anything!");
            }
            populateOrder();
        }
        else{
             JOptionPane.showMessageDialog(null, "Plase fill a correct number");
            }
        } else {
            JOptionPane.showMessageDialog(null, "You need to select an Offer!");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSellActionPerformed

    private void txtBitcoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBitcoinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBitcoinActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnBack;
    private javax.swing.JTable TblCashier;
    private javax.swing.JButton btnBuy;
    private javax.swing.JButton btnSell;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtBitcoin;
    private javax.swing.JTextField txtCash;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
}
