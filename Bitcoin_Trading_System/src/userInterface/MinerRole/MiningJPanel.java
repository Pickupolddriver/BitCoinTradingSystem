/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.MinerRole;

import Blockchain.Block;
import Blockchain.BlockChain;
import Blockchain.Transaction;
import Business.EcoSystem;
import Business.Enterprise.MinerEnterprise;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JPanel;
import Blockchain.searchNewestBlockAPI;
import Business.WorkQueue.WorkRequest;
import java.util.Date;
import javax.swing.JOptionPane;
import Blockchain.showAllTransactionsAPI;

/**
 *
 * @author lijianxi
 */
public class MiningJPanel extends javax.swing.JPanel implements searchNewestBlockAPI, showAllTransactionsAPI {

    /**
     * Creates new form MiningJPanel
     */
    private JPanel processPanel;
    private EcoSystem business;
    private MinerEnterprise me;

    public MiningJPanel(JPanel processPanel, EcoSystem business, MinerEnterprise me) {
        initComponents();
        this.processPanel = processPanel;
        this.business = business;
        this.me = me;
        //setting the table invisible before the new block is shown
        tblTrans.setVisible(false);
        // invoke the wiat seconds method, which will pause the application for 15 seconds, then invoke another method inside it
        // jump to waitSeconds() method for details
        waitSeconds();
        JOptionPane.showMessageDialog(null, "A new block has been created and added to the current blockchain and bonus have been issued to you");
        showAllTransactionsAPI.showAllTransaction(tblTrans, business);
    }

    public void waitSeconds() {
        try {
            //sleep for 15 seconds
            Thread.sleep(1500);
            //after 15 seconds, invoke the mineNewBlock() method
            mineNewBlock();
        } catch (InterruptedException e) {
            System.err.println(e.getMessage());
        }
    }

    /**
     * This method will first call the searchNewestBlock interface, to find the
     * most updated blockchain then assign the newest blockchain to the "my"
     * blockchain add new blank block to the "my" blockchain wrap the blockchain
     * in a work request and send it to the business class so everyone can get
     * the newest blockchain from business class after sending the work request,
     * invoke issueBonue() method, to issue a bonus to this miner
     */
    public void mineNewBlock() {
        me.getWallet().setBlockChaine(searchNewestBlockAPI.searchNewestBlock(business));
        Block blc = new Block();
        me.getWallet().getBlockChaine().addBlock(blc, me);
        issueBonus(me.getWallet().getBlockChaine());
    }

    /**
     *
     * @param bc
     */
    public void issueBonus(BlockChain bc) {
        Block b = bc.getHm().get(bc.getHm().size());
        Transaction trans = new Transaction();
        trans.setFrom(0);
        trans.setTo(me.getenterpriseId());
        int bonus=20;
        int count=bc.getHm().size()/5;
        for(int i=1;i<=count;i++){
            bonus=bonus/2;
        }
        trans.setBtcAmount(bonus);
        trans.setMinerOrganization(me);
        trans.setTransactionDate(new Date());
        b.getBody().addTransaction(trans, me);
        WorkRequest wr = new WorkRequest();
        wr.setBc(me.getWallet().getBlockChaine());
        wr.setStatus("Update Needed");
        
        business.getWorkQueue().getWorkRequestList().add(wr);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BtnBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTrans = new javax.swing.JTable();

        BtnBack.setText("Back");
        BtnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBackActionPerformed(evt);
            }
        });

        tblTrans.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sender", "Receiver", "Amount", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblTrans);
        if (tblTrans.getColumnModel().getColumnCount() > 0) {
            tblTrans.getColumnModel().getColumn(0).setResizable(false);
            tblTrans.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(526, 526, 526)
                .addComponent(BtnBack)
                .addContainerGap(289, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 648, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(111, 111, 111))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addComponent(BtnBack)
                .addContainerGap(153, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void BtnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBackActionPerformed
        // TODO add your handling code here:
        processPanel.remove(this);
        Component[] componentArray = processPanel.getComponents();
        Component component = componentArray[componentArray.length - 1];
        MinerWorkAreaJPanel minerPanel = (MinerWorkAreaJPanel) component;
        CardLayout layout = (CardLayout) processPanel.getLayout();
        layout.previous(processPanel);
    }//GEN-LAST:event_BtnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnBack;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblTrans;
    // End of variables declaration//GEN-END:variables
}
